Tutorial 1: Creating, adding, committing, pushing and modifying.

Step 1: Creating, adding, committing
This file was created on the local machine and then added to the local repository with GitBash using

	$ git add Tutorial.txt

and then committed to the local repository with GitBash using

	$ git commit -a -m "[insert commit message here]"


Step 2: Pushing
This file was pushed to the online repository with GitBash using

	$ git pull origin master
	$ git push origin master

(you should always pull down any potential changes from the online repository before attempting to push your changes up. It is possible that the pull will fail if you have uncommitted changes to files that would be modified by the pull. In that case you will need to commit your changes to those files and then pull)


Step 3: Modifying
This file was then modified (by adding Step 3). The list of modified files can be viewed with GitBash using

	$ git status

Committing and pushing the modified file is as before

	$ git commit -a -m "[insert commit message here]"
	$ git pull origin master
	$ git push origin master


Key concepts:
*** Files need to be added to the staging area before they can be committed. The -a switch in the commit command automatically "add"s changes from all known files (i.e. all files that are already listed in the index) and to automatically "rm"s files in the index that have been removed from the working tree. Newly created files will not be added with the -a switch. If you want to be more selective with which modified files you want to commit, explicitly add the desired files and then commit without the -a switch. For example

	$ git add [filename]
	$ git commit -m "[insert commit message here]"

*** When files are committed they are committed to your local repository. To get the latest changes from the online repository or to add your changes to the online repository you will need to pull and push respectively.

*** If you accidentally add a file to the staging area that you don't want to commit you can use the following command

	$ git reset HEAD [filename]

*** Fixing mistakes - If you’ve messed up the working tree, but haven’t yet committed your mistake, you can return the entire working tree to the last committed state with

	$ git reset --hard HEAD

Todo:
*** Learn how to set a default merge branch so that

	$ git [pull | push] origin master

would become

	$ git [pull | push]

*** Understand the reset command better.

A modification for Eliud.