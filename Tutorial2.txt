Tutorial 2: Conflicts.

This file was created to enable the creation and resolution of conflicts in Git. Conflicts occur when different users make changes to the same files (or folder structure) and Git is unable to merge the changes. At this point a user must tell Git which parts of the code are valid.

To create a conflict two users will modify the same line in this file locally and push the modification up to the online repository. The first user won't have any problems but the second user will have a conflict.



[This line of the file was modified, for educational purposes of course.]



The conflict results in this file being modified with the following text

	<<<<<<< HEAD
	[modified text from user 1]
	=======
	[modified text from user 2]
	>>>>>>> [commit id]


Resolving the Conflict:
The conflict can be resolved from GitBash using

	$ git mergetool

Once all conflicts are resolved you may commit and push your changes.


Undoing a Merge:
If you get stuck and decide to just give up and throw the whole mess away, you can always return to the pre-merge state with

	$ git reset --hard HEAD


Notes:
*** The mergetool command creates *.orig backup files while resolving merges. These are safe to remove once a file has been merged and its git mergetool session has completed. Setting the mergetool.keepBackup configuration variable to false causes git mergetool to automatically remove the backup as files are successfully merged.

	$ git config mergetool.keepBackup false

